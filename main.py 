import tkinter as tk

# Colores y fuentes para modo oscuro y estilo Google con detalles verdes
BG_COLOR = "#222831"       # fondo principal
BTN_COLOR = "#393E46"      # botones normales
BTN_TEXT_COLOR = "#EEEEEE" # texto normal
BTN_GREEN = "#21C26D"      # verde para igual (=)
BTN_GREEN_TEXT = "#222831" # texto oscuro en botón verde
FONT = ("Roboto", 18)
DISPLAY_FONT = ("Roboto", 28)

class OpenCalculator(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Open Calculator")
        self.geometry("350x500")
        self.resizable(False, False)
        self.config(bg=BG_COLOR)
        self.expresion = ""
        self.crear_widgets()

    def crear_widgets(self):
        # Display
        self.display = tk.Entry(self, font=DISPLAY_FONT, bd=0, bg=BG_COLOR, fg=BTN_TEXT_COLOR, justify="right")
        self.display.pack(fill="both", ipady=20, pady=(20, 10), padx=10)
        self.display.insert(0, "0")

        # Botones (diseño tipo Google)
        botones = [
            ["7", "8", "9", "/"],
            ["4", "5", "6", "*"],
            ["1", "2", "3", "-"],
            ["0", ".", "C", "+"],
        ]

        for fila in botones:
            frame = tk.Frame(self, bg=BG_COLOR)
            frame.pack(expand=True, fill="both")
            for texto in fila:
                if texto == "C":
                    b = tk.Button(frame, text=texto, font=FONT, bg="#FF6161", fg="#FFFFFF", bd=0, highlightthickness=0,
                                  activebackground="#FF8181", activeforeground="#FFFFFF",
                                  command=self.limpiar)
                else:
                    b = tk.Button(frame, text=texto, font=FONT, bg=BTN_COLOR, fg=BTN_TEXT_COLOR, bd=0, highlightthickness=0,
                                  activebackground="#575E6B", activeforeground=BTN_TEXT_COLOR,
                                  command=lambda t=texto: self.click(t))
                b.pack(side="left", expand=True, fill="both", padx=3, pady=3)

        # Última fila: Potencia, Raíz, Igual (=)
        frame = tk.Frame(self, bg=BG_COLOR)
        frame.pack(expand=True, fill="both")

        b_pot = tk.Button(frame, text="^", font=FONT, bg=BTN_COLOR, fg=BTN_TEXT_COLOR, bd=0, highlightthickness=0,
                          activebackground="#575E6B", activeforeground=BTN_TEXT_COLOR,
                          command=lambda: self.click("^"))
        b_pot.pack(side="left", expand=True, fill="both", padx=3, pady=3)

        b_raiz = tk.Button(frame, text="√", font=FONT, bg=BTN_COLOR, fg=BTN_TEXT_COLOR, bd=0, highlightthickness=0,
                           activebackground="#575E6B", activeforeground=BTN_TEXT_COLOR,
                           command=lambda: self.click("√"))
        b_raiz.pack(side="left", expand=True, fill="both", padx=3, pady=3)

        b_igual = tk.Button(frame, text="=", font=FONT, bg=BTN_GREEN, fg=BTN_GREEN_TEXT, bd=0, highlightthickness=0,
                            activebackground="#37db8b", activeforeground=BTN_GREEN_TEXT,
                            command=self.calcular)
        b_igual.pack(side="left", expand=True, fill="both", padx=3, pady=3)

    def click(self, item):
        if self.display.get() == "0" or self.display.get().startswith("Error"):
            self.display.delete(0, tk.END)
        if item == "^":
            self.display.insert(tk.END, "**")
        elif item == "√":
            self.display.insert(tk.END, "√(")
        else:
            self.display.insert(tk.END, item)

    def limpiar(self):
        self.display.delete(0, tk.END)
        self.display.insert(0, "0")

    def calcular(self):
        try:
            expresion = self.display.get().replace("√", "sqrt")
            # Soporte para raíz cuadrada
            def sqrt(x):
                import math
                if float(x) < 0:
                    raise ValueError
                return math.sqrt(float(x))
            # Evaluar de manera segura
            resultado = eval(expresion, {"__builtins__": None}, {"sqrt": sqrt})
            self.display.delete(0, tk.END)
            self.display.insert(0, str(resultado))
        except ZeroDivisionError:
            self.display.delete(0, tk.END)
            self.display.insert(0, "Error: División por cero")
        except Exception:
            self.display.delete(0, tk.END)
            self.display.insert(0, "Error")

if __name__ == "__main__":
    OpenCalculator().mainloop()